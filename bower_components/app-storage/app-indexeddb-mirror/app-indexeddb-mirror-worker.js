(function(){'use strict';function a(k,l){k=k||'app-mirror',l=l||'mirrored_data',this[f]=k,this[g]=l,this[d]=[],this[h]=null,this.supportsIndexedDB=null!=self.indexedDB,self.Promise&&this.supportsIndexedDB||console.error('Indexeddb Mirror is not supported'),this.openDb(),self.addEventListener('unhandledrejection',function(m){console.error(m)}),self.addEventListener('error',function(m){console.error(m)}),console.log('AppIndexedDBMirrorWorker started...')}var b='internal',d='__clientPorts',f='__dbName',g='__storeName',h='__dbOpens',j=[function(k){k.database.createObjectStore(k.storeName)},function(k){k.database.createObjectStore(b)}];a.prototype={openDb:function(){return this.__dbOpens=this.__dbOpens||new Promise(function(k,l){console.log('Opening database..');var m=self.indexedDB.open(this[f],2);m.onupgradeneeded=function(n){console.log('Upgrade needed:',n.oldVersion,'=>',n.newVersion);for(var o={database:m.result,storeName:this[g],dbName:this[f]},p=n.oldVersion;p<n.newVersion;++p)j[p]&&j[p].call(this,o)}.bind(this),m.onsuccess=function(){console.log('Database opened.'),k(m.result)},m.onerror=function(){l(m.error)}}.bind(this)),this.__dbOpens},closeDb:function(){return null==this.__dbOpens?Promise.resolve():this.openDb().then(function(k){this.__dbOpens=null,console.log('Closing database..'),k.close()}.bind(this))},operateOnStore:function(k,l,m){if(self.Promise&&this.supportsIndexedDB){var n=Array.from(arguments).slice(3);return this.openDb().then(function(o){return console.log('Store operation:',k,l,m,n),new Promise(function(p,q){try{var r=o.transaction(l,m),s=r.objectStore(l),t=s[k].apply(s,n)}catch(u){return q(u)}r.oncomplete=function(){p(t.result)},r.onabort=function(){q(r.error)}})})}},get:function(k,l){return this.operateOnStore('get',k,'readonly',l)},set:function(k,l,m){return this.operateOnStore('put',k,'readwrite',m,l)},clear:function(k){return this.operateOnStore('clear',k,'readwrite')},transaction:function(k,l,m){return m=m||null,'get'===k?this.get(this[g],l):'set'===k?this.set(this[g],l,m):Promise.reject(new Error('Method not supported: '+k))},validateSession:function(k){return Promise.all([this.openDb(),this.get(b,'session')]).then(function(l){var m=l[0],n=l[1],o=[];k!==n&&(null!=n&&o.push(this.clear(this[g])),o.push(this.set(b,'session',k)))}.bind(this))},registerClient:function(k){k.addEventListener('message',function(m){this.handleClientMessage(m,k)}.bind(this));var l=k.toString()in this[d];l||this[d].push(k),k.start(),k.postMessage({type:'app-mirror-connected',supportsIndexedDB:this.supportsIndexedDB}),console.log('New client connected.')},handleClientMessage:function(k,l){if(!k.data)return null;var m=k.data.id;switch(k.data.type){case'app-mirror-close-db':this.closeDb().then(function(){l.postMessage({type:'app-mirror-db-closed',id:m})});case'app-mirror-validate-session':this.validateSession(k.data.session).then(function(){l.postMessage({type:'app-mirror-session-validated',id:m})});break;case'app-mirror-transaction':this.transaction(k.data.method,k.data.key,k.data.value).then(function(o){l.postMessage({type:'app-mirror-transaction-result',id:m,result:o})});break;case'app-mirror-disconnect':var n=this[d].indexOf(l);-1!==n&&this[d].splice(n,1);}}},self.appIndexedDBMirrorWorker=new a,self.addEventListener('connect',function(k){self.appIndexedDBMirrorWorker.registerClient(k.ports[0])})})();